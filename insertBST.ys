# This program isn't for the faint-hearted.
# That just sounds like a challenge :)
# Consider it accepted.
       .pos 0
       irmovq stack, %rsp
       irmovq node0, %rdi  #address of root node
       irmovq newN1, %rsi  #address of node to insert
       call insertBST
       irmovq node0, %rdi  #address of root node
       irmovq newN2, %rsi  #address of node to insert
       call insertBST
       halt
#
insertBST: irmovq $8, %rax # hold 8
           #address of root node is in %rdi
           #address of node to insert is in %rsi
           #address of node we are on currently is in rcx
           #rax holds 8 
           # Step 1. Get RDI's memory value (node1)
           # Step 2. See if Node1's left/right ZERO (must increment(
           # If 0, set it's value to RSI.
           # If set, halt.
           mrmovq (%rdi), %rbx # rbx holds actual address of node1
           andq %rbx, %rsi # see if same address
           je set # set if same
           addq %rax, %rbx # add immediate to address to address right child
           andq %rbx, %rsi # see if right child is address rsi
           je set #if it is set
           jmp insertBST
              
set:       mrmovq (%rbx), %rsi
           irmovq $0, %rax
           ret



       .pos 0x200
node0: .quad node1    #address of left child
       .quad node2    #address of right child
       .quad 10       #value in the node
node1: .quad node3
       .quad 0 #should be modified to be newNd1 (0x290)
       .quad 4
node2: .quad node4
       .quad node5
       .quad 15
node3: .quad 0
       .quad 0
       .quad 2
node4: .quad 0  #should be modified to be newNd2 (0x2a8)
       .quad 0
       .quad 12
node5: .quad 0
       .quad 0
       .quad 20
newN1: .quad 0
       .quad 0
       .quad 5
newN2: .quad 0
       .quad 0
       .quad 11
       .pos 0x400
stack: .quad 0
