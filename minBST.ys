# This program calls a minBST function that returns the minimum value
# in a binary search tree.  The parameter to minBST is in %rdi.
# %rdi contains the address of the root node. The return value is
# stored in %rax. A node consists of three 8-byte fields: address
# of left child, address of right child, value of node.
       .pos 0
       irmovq stack, %rsp
       irmovq node0, %rdi
       irmovq 0, %rax
       call minBST
       halt
minBST: #address of root node is in %rdi
        #returns the minimum value in the tree in register %rax
        irmovq $16, %rdx #rdx holds immeditate for 16
loop:
        mrmovq (%rdi), %rcx #rcx holds left child ADDRESS
        andq %rcx, %rcx #if rcx is zero, then we know we have no child
        je load # will take the value of rdi (root) and take it to load
        # IF WE GET PAST HERE, WE HAVE A LEFT CHILD, SO WE MUST LOOP.
        # WE NEED TO MOVE RDI TO THE ADDRESS OF IT'S LEFT CHILD.
        # RCX IS THE ADDRESS OF IT'S LEFT CHILD.
        mrmovq (%rcx), %rdi # WILL STORE THE ADDRESS OF THE LEFT CHILD AS THE NEW ROOT.
        jmp loop
        
load:   # this function will add 16 to the address of rdi to get the address of it's data
        # then store it's data into RAX
        addq %rdx, %rdi 
        mrmovq (%rdi), %rax # rax would store, 10, 4, 12, 2, 11, etc 
        jmp done:
    
done:  ret
#
       .align 8
node0: .quad node1    #address of left child
       .quad node2    #address of right child
       .quad 10       #value in the node
node1: .quad node3
       .quad 0
       .quad 4
node2: .quad node4
       .quad node5
       .quad 12
node3: .quad 0
       .quad 0
       .quad 2        #here is the minimum value
node4: .quad 0
       .quad 0
       .quad 11
node5: .quad 0
       .quad 0
       .quad 15
       .pos 0x200
stack: .quad 0
